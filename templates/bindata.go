// Code generated by go-bindata.
// sources:
// tmpl/file.tmpl
// tmpl/gk.json.tmpl
// tmpl/partials/constants.tmpl
// tmpl/partials/endpoint_func.tmpl
// tmpl/partials/func.tmpl
// tmpl/partials/func_parameters.tmpl
// tmpl/partials/func_results.tmpl
// tmpl/partials/func_return.tmpl
// tmpl/partials/imports.tmpl
// tmpl/partials/interface.tmpl
// tmpl/partials/interface_func.tmpl
// tmpl/partials/interface_stub.tmpl
// tmpl/partials/struct.tmpl
// tmpl/partials/struct_function.tmpl
// tmpl/partials/vars.tmpl
// tmpl/proto.pb.tmpl
// tmpl/proto_compile.bat.tmpl
// tmpl/proto_compile.sh.tmpl
// tmpl/svc.thrift.tmpl
// tmpl/thrift_compile.bat.tmpl
// tmpl/thrift_compile.sh.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplFileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6b\x84\x40\x10\x85\x7b\xc1\xff\x30\x2c\x16\x09\x04\x49\x1d\x48\x75\xd5\x15\x09\x81\x40\xda\xb0\x78\xa3\x91\xb8\xb3\x66\x9d\xb3\x19\xf6\xbf\x87\x75\xf5\xb2\x8a\x42\x3a\x9d\xf7\xde\xf7\xc6\x41\x91\xb6\x06\x42\x28\x4f\xd6\x18\x24\x06\xa5\xbc\x17\x59\x5e\xbd\xcf\x33\x11\xa4\x8b\xf7\xbd\xae\xbe\x75\x83\x20\x52\xbe\xc5\xc7\x60\x6c\x6b\x68\x18\xee\x3a\x24\x28\xcf\xa6\xb7\x8e\x87\x7b\x78\x8c\x31\x46\xd3\x77\x9a\x11\x54\x1b\x15\x75\xf3\x84\xe8\x44\x5d\x13\x4e\x96\x06\xd6\xb4\xcb\xa8\x16\x4d\x25\xbe\x03\xce\x87\x76\x7b\x88\x51\xbb\x90\x0e\xea\x41\xf0\x4c\x8c\xae\xd6\x15\xfe\xc5\x9d\xa6\x06\xa1\x68\x1f\x8a\x11\x9e\x9e\x53\x4b\x08\x27\xdf\xb8\xcc\x15\x14\x63\x72\xb7\xdd\x9e\x77\x76\xd7\x8a\x8f\x4b\x66\x7d\xdd\x30\x4c\xc3\xff\xe0\x5f\x90\xbf\xec\x65\x8b\x4f\xf8\xb3\x61\xce\xe1\x0f\x14\xe3\xdc\x59\xbe\x6a\x83\xd3\x5f\xb0\xbe\x5d\x7d\xa5\x2a\x56\x8b\x60\x37\xe0\x56\x8f\xcb\x7d\x06\x1b\xb7\x96\x6e\xd6\xb0\xdc\x76\xd9\x3c\xcb\xb3\xdf\x00\x00\x00\xff\xff\x6a\x5a\x44\xd7\x79\x02\x00\x00"

func tmplFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFileTmpl,
		"tmpl/file.tmpl",
	)
}

func tmplFileTmpl() (*asset, error) {
	bytes, err := tmplFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/file.tmpl", size: 633, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\x42\xd0\x5c\xe4\x00\x5e\xbb\x77\xf1\x01\x12\x5a\xa2\x1d\x21\xd6\x0f\x28\xa6\x1d\x04\xdd\xbd\x50\x1d\xc5\x55\x1b\x20\x40\x3b\x78\xb4\xf9\x9e\xde\x47\xbe\xd4\x09\x21\x23\xd2\xbb\x51\x28\xfb\xf2\x25\x84\x0c\xc0\x67\xd9\xcb\x94\x4e\x29\xb1\x1f\x1c\x5c\xf0\x15\x22\x8a\xc3\xb0\x0a\xdf\xc0\x62\xce\xa7\x9c\x53\x9a\xcc\x82\x03\x06\x20\x60\x4f\x39\x87\xcb\xfc\xeb\xdf\xf3\x67\x6a\xfe\xcb\x1a\x5f\xfc\x47\x07\x16\x65\x5f\xd1\x0e\xb3\xaf\x53\xe3\x18\x69\x02\x75\x97\x0c\xad\x3b\x32\x5d\x15\xd7\xe1\x08\xd1\xa8\xaa\xe8\x84\xc8\x45\x25\xad\xd1\x7a\xc1\x0f\xa0\x6d\xe7\x9b\x7e\x9b\x94\xc8\xbb\x01\x9d\x0e\xde\x38\x8e\xbb\xdd\xa8\x12\x3c\x3e\x12\x37\xb4\x67\xe6\xc0\x04\x2e\x06\x4f\xbc\x1b\xf1\x46\xf0\x00\xb9\x20\x36\xcc\x33\x05\xf5\x83\x79\x67\xe2\x86\xb7\xe0\x35\xbc\x61\xfc\x37\xe4\x73\x4b\x18\xb7\x40\x65\xf5\xad\xca\x1a\xa9\xac\xfe\xc3\x9b\x6b\x1b\xcd\x72\x16\x8c\x6b\x96\xd3\x38\xc1\x75\xe1\xe3\xb7\x42\xbe\x1a\x93\x5d\xfe\x0c\x00\x00\xff\xff\xc2\x89\xf2\x84\x31\x04\x00\x00"

func tmplGkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl,
		"tmpl/gk.json.tmpl",
	)
}

func tmplGkJsonTmpl() (*asset, error) {
	bytes, err := tmplGkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json.tmpl", size: 1073, mode: os.FileMode(511), modTime: time.Unix(1510027027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsConstantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x4d\xce\xcf\x2b\x2e\x51\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\x78\xb9\x34\xa1\x2c\x40\x00\x00\x00\xff\xff\x8f\xa8\x2f\x23\x80\x00\x00\x00"

func tmplPartialsConstantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsConstantsTmpl,
		"tmpl/partials/constants.tmpl",
	)
}

func tmplPartialsConstantsTmpl() (*asset, error) {
	bytes, err := tmplPartialsConstantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/constants.tmpl", size: 128, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6b\xc3\x30\x14\x84\xf7\x42\xff\xc3\x0d\x1e\x6c\x10\xa2\x73\x20\x53\xa0\x63\x87\x40\xbb\x16\xe1\xbe\x04\x81\x2a\xbb\x92\x6c\x02\x8f\xf7\xdf\x8b\x2c\xdb\xa4\xf6\x90\xa1\x5e\x8c\xc4\x71\xf7\xdd\xe9\xf9\x09\x00\x02\xa5\x21\x78\x5c\x06\xdf\xd6\x6d\xba\xa1\xed\x7c\xa2\x5b\xd2\xa7\xf2\x57\x00\xb3\xbd\xe0\x9a\x50\x3b\xf2\xd0\x67\xfa\x19\x28\x26\xfd\x61\x42\x6c\xf0\x22\x12\xca\x05\x33\xb9\x48\x22\x9f\xcc\xe4\xbf\x44\x60\x7d\xa2\x70\x31\x2d\xb1\x34\xa8\xef\x4e\x0a\x14\x42\x17\x1a\x70\x21\x58\xbe\xc7\x39\x38\x1c\x31\xc7\xe9\x9a\x79\xd5\xbc\x99\x6f\x12\x69\xb6\x76\x13\x07\x73\x30\xfe\x4a\xa8\xac\xaa\xc6\x6c\xa0\x4f\xc6\x39\xeb\xaf\xfa\x4c\x71\x70\x29\x66\x49\x35\xce\x1e\x13\x83\xef\x32\x84\x89\x09\x95\x45\xb5\xd5\x37\x22\x6a\xf5\x2e\x55\x0f\x47\xc4\xb1\xd5\xcc\xab\xb6\xb8\xe5\x41\xd5\x1e\xe0\xbe\x9a\x48\x6e\xa4\x1f\x20\xfc\x19\x63\x97\xbf\x29\x3e\xbf\xe8\xb4\x4f\xec\x3b\x1f\x69\x71\xc6\x8e\x65\xd7\x2e\x9b\xa6\xee\xbd\xef\x29\xbc\xda\x90\xf3\x17\xae\xc3\xbf\x67\x12\x05\x6f\x5d\x81\x95\xdf\x00\x00\x00\xff\xff\x32\x8c\x9b\xf7\x7e\x02\x00\x00"

func tmplPartialsEndpoint_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_funcTmpl,
		"tmpl/partials/endpoint_func.tmpl",
	)
}

func tmplPartialsEndpoint_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_func.tmpl", size: 638, mode: os.FileMode(511), modTime: time.Unix(1503390652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFuncTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x51\xca\x83\x40\x0c\x84\xdf\x05\xef\x30\xe4\x49\x5f\x96\xff\x0c\x7f\x6f\xd0\x0b\x88\x68\x2c\xc2\x1a\x5b\xcd\x3e\x94\x90\xbb\x97\xdd\x6d\x0b\x7d\x9b\x49\x86\x6f\xc6\x6c\x5d\x20\x8c\x70\xd9\xb7\x8d\x45\x41\xe4\x6e\xf6\xb1\x59\xb3\xcc\xee\x4b\x92\x09\x66\xca\xdb\x3d\x8e\xca\xa0\x55\x94\x8f\x65\x9c\x78\xc8\x2f\x42\x70\x87\xa1\xe2\x76\x45\xc7\x0f\x84\xff\x7d\x7e\x82\xa8\x2f\xc4\x6c\x0a\x2e\x9e\xec\xde\x36\x25\x7a\x53\x74\x91\x05\xe1\xca\x67\x8a\x7a\xf6\xf8\x73\x3f\x58\xd3\x21\x3f\x6d\xb9\x63\xa8\x77\xfa\x86\x2b\xa5\xcc\x03\xde\xa2\x6d\xfc\x15\x00\x00\xff\xff\xf4\xd8\xe7\x8c\xd3\x00\x00\x00"

func tmplPartialsFuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFuncTmpl,
		"tmpl/partials/func.tmpl",
	)
}

func tmplPartialsFuncTmpl() (*asset, error) {
	bytes, err := tmplPartialsFuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func.tmpl", size: 211, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_parametersTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x25\x0a\x1a\x39\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\x05\x08\x00\x00\xff\xff\x15\x5b\x78\xe8\x50\x00\x00\x00"

func tmplPartialsFunc_parametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_parametersTmpl,
		"tmpl/partials/func_parameters.tmpl",
	)
}

func tmplPartialsFunc_parametersTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_parametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_parameters.tmpl", size: 80, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_resultsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xd5\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x20\xfd\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\xa5\x09\xa5\x01\x01\x00\x00\xff\xff\xcc\x6e\x26\x22\x6c\x00\x00\x00"

func tmplPartialsFunc_resultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_resultsTmpl,
		"tmpl/partials/func_results.tmpl",
	)
}

func tmplPartialsFunc_resultsTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_resultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_results.tmpl", size: 108, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_returnTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\x05\x31\x33\xd3\x14\xf2\xf2\x4b\x14\x34\x72\x12\x8b\x4b\x14\x54\x32\x15\x54\x34\x6b\x6b\x75\xaa\xab\x53\xf3\x52\x40\xb2\x60\x0a\x10\x00\x00\xff\xff\xbc\x66\xba\xd5\x44\x00\x00\x00"

func tmplPartialsFunc_returnTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_returnTmpl,
		"tmpl/partials/func_return.tmpl",
	)
}

func tmplPartialsFunc_returnTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_returnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_return.tmpl", size: 68, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsImportsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x50\xa9\xad\xcd\xcc\x2d\xc8\x2f\x2a\xd1\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x05\x49\x82\x15\xe5\xe5\x97\x28\x68\xa4\x16\x2a\xa8\x94\xe9\xf9\x25\xe6\xa6\x2a\x28\x29\x69\x82\x64\xa0\xdc\xda\x5a\x85\xea\xea\xd4\xbc\x14\xa8\x50\x48\x65\x41\x6a\x6d\x2d\xc8\x34\xb0\x18\x2f\x97\x26\x94\x05\x08\x00\x00\xff\xff\x47\x50\xa7\x81\x70\x00\x00\x00"

func tmplPartialsImportsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsImportsTmpl,
		"tmpl/partials/imports.tmpl",
	)
}

func tmplPartialsImportsTmpl() (*asset, error) {
	bytes, err := tmplPartialsImportsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/imports.tmpl", size: 112, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterfaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\xca\xc2\x30\x10\xc5\xf1\x7d\xa1\x77\x78\x84\x2c\x3f\x72\x80\x0f\x5c\xb9\xd6\x2b\x48\x68\x5f\x34\x60\xa6\xa5\x8e\x05\x19\xe6\xee\x12\x41\x77\xef\x2d\x7e\x7f\xb3\x5a\x20\x44\x3a\x2e\xad\x51\x14\x21\xb8\x9b\x7d\x6f\xdf\x94\xd9\x5d\x5f\x2b\x61\x96\xce\xb9\xd1\x1d\x55\x94\x5b\xc9\x13\x61\xe3\x60\xb6\x65\xb9\x12\xb1\xfe\xc5\x1d\xff\x07\xa4\x13\xf5\xb6\xcc\x8f\xae\x95\x6d\xbd\x67\x25\xc2\xcf\x5c\xca\x53\xa6\x80\xb8\xbb\x77\xfc\xe9\x8f\x83\xbf\x03\x00\x00\xff\xff\x55\x08\xe2\x86\x8b\x00\x00\x00"

func tmplPartialsInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterfaceTmpl,
		"tmpl/partials/interface.tmpl",
	)
}

func tmplPartialsInterfaceTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface.tmpl", size: 139, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x2b\xcd\x4b\x8e\x2f\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\x52\xd0\x0b\x80\x73\x6a\x6b\x35\x31\x94\x16\xa5\x16\x97\xe6\x94\x80\xd4\x05\x41\x58\xb5\xb5\x80\x00\x00\x00\xff\xff\xc1\x2e\xd4\xb5\x59\x00\x00\x00"

func tmplPartialsInterface_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_funcTmpl,
		"tmpl/partials/interface_func.tmpl",
	)
}

func tmplPartialsInterface_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_func.tmpl", size: 89, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_stubTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x2e\x29\x2a\x4d\x2e\x51\x52\xd0\xab\xad\xe5\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\xd4\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x45\xd5\x55\x9a\x14\x9f\x56\x9a\x97\x5c\x92\x99\x9f\xa7\xa4\xa0\x52\x06\xd2\x0d\xd2\x9f\x9a\x97\x52\x5b\x0b\x08\x00\x00\xff\xff\xb3\x9e\x14\xdc\x60\x00\x00\x00"

func tmplPartialsInterface_stubTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_stubTmpl,
		"tmpl/partials/interface_stub.tmpl",
	)
}

func tmplPartialsInterface_stubTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_stubTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_stub.tmpl", size: 96, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStructTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xb1\x0a\xc2\x40\x18\x03\xe0\x5d\xf0\x1d\x42\xb9\x51\xee\x01\x04\x27\x77\x27\x71\x3f\xf4\x57\x3a\xdc\x6f\xb9\xfe\x16\x4a\xc8\xbb\x8b\x95\xdb\x12\x48\x3e\x72\x7c\xc2\x0d\xf9\xfc\xae\xd5\x3c\x30\x0c\x12\xd9\xab\xb4\xdf\x91\xe6\x0f\x29\xd6\xc9\x40\xe6\x4b\xa9\x26\x61\x8e\xf6\xb9\x07\x08\xb2\x15\x7f\x19\xd2\x78\x48\x0b\x8e\x27\xe4\x5b\x69\xf3\xff\x98\x96\x3e\xdf\xf2\x75\x9d\xec\xa7\x6f\x1e\xf4\x0d\x00\x00\xff\xff\x6e\x16\x52\x29\x7c\x00\x00\x00"

func tmplPartialsStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStructTmpl,
		"tmpl/partials/struct.tmpl",
	)
}

func tmplPartialsStructTmpl() (*asset, error) {
	bytes, err := tmplPartialsStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct.tmpl", size: 124, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_functionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcf\xcd\x4a\xc7\x30\x10\x04\xf0\xbb\xe0\x3b\x0c\x39\xb5\x97\xe0\x33\xe8\xdd\x83\x7a\x2f\xa5\xdd\x48\x21\x49\x6b\xba\x39\x94\x65\xde\x5d\x62\xfd\x7f\x9d\x92\x19\x76\xf9\xb1\x66\x4b\x40\x16\xf8\xb7\x35\x25\xc9\x0a\xe7\x48\xb3\x4b\x24\x9f\x9f\xcc\x24\xcf\x64\xa8\x79\x42\x67\xe6\x3f\xb5\xd4\x49\xfd\xfb\x98\x84\xc4\xad\xf8\x3a\x36\x21\x7b\x98\xa9\xa4\x2d\x8e\x2a\x70\x4b\x56\x29\x61\x9c\x64\x68\xeb\x0e\x9e\x34\x9c\xe6\xaa\xe8\xe4\x07\xfe\x75\x9d\x0f\x38\xd7\xff\xb1\x2d\xb4\x8f\xc4\x5d\x4e\x7b\x09\xf8\x56\x74\x51\x32\xfc\x87\xec\x35\xea\xde\xe3\x85\x2c\xa2\xb5\xe4\x07\xac\x11\xc3\xd9\xbb\xeb\xf0\xdd\x05\xff\x0f\xf8\x1b\x00\x00\xff\xff\x25\x63\x5f\x34\xf5\x00\x00\x00"

func tmplPartialsStruct_functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_functionTmpl,
		"tmpl/partials/struct_function.tmpl",
	)
}

func tmplPartialsStruct_functionTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_function.tmpl", size: 245, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsVarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x2d\x4b\x2c\x52\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\x78\xb9\x34\xa1\x2c\x40\x00\x00\x00\xff\xff\x51\x62\x20\x15\x7e\x00\x00\x00"

func tmplPartialsVarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsVarsTmpl,
		"tmpl/partials/vars.tmpl",
	)
}

func tmplPartialsVarsTmpl() (*asset, error) {
	bytes, err := tmplPartialsVarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/vars.tmpl", size: 126, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProtoPbTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4e\x87\x30\x10\xc6\xf7\x26\x7d\x87\x0b\x61\xd0\xc4\xc0\xe0\x26\x61\x72\xd6\x41\x7d\x81\x0a\x27\x34\x48\x5b\x7b\x85\x48\x2e\xf7\xee\xa6\x08\x6a\x1c\xfe\xe3\x7d\xdf\x2f\xbf\xbb\xa3\xcd\x25\xf3\x09\x2d\x14\x21\xfa\xe4\x6f\x8b\x46\xab\x60\xba\xc9\x0c\x08\xcc\xc9\x3f\x3b\x33\xe1\xbd\x21\x84\xea\xd1\xcc\x28\x12\x5e\x1b\xad\xea\x1a\x5e\xc6\x0c\x1c\x21\x10\xc6\xd5\x76\x08\x3d\xbe\x59\x67\x93\xf5\xae\xd2\xea\x0c\x7f\x31\xd6\x8a\x39\x1a\x37\x20\x94\xf6\xa6\x5c\xe1\xae\x85\xea\x01\xd3\xe8\x7b\x12\x81\x18\x3a\x60\x2e\xd7\x13\xbf\xda\x87\x27\xfc\x58\x90\x92\xc8\x35\x44\x4c\x4b\x74\xf4\x53\x84\xf7\x2d\xc7\x2c\xd9\x8b\xae\x17\x91\x8b\x1b\x66\x24\xfa\xfe\xec\xaf\x37\x9f\x25\x5a\xfd\x2b\x77\xf7\x51\x1d\xf2\xaf\x00\x00\x00\xff\xff\x37\xf0\xf4\xfe\x2d\x01\x00\x00"

func tmplProtoPbTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProtoPbTmpl,
		"tmpl/proto.pb.tmpl",
	)
}

func tmplProtoPbTmpl() (*asset, error) {
	bytes, err := tmplProtoPbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto.pb.tmpl", size: 301, mode: os.FileMode(511), modTime: time.Unix(1510027714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xb1\x6a\x03\x31\x0c\x86\xf7\x40\xde\x41\x2f\x60\x7b\xe8\x66\xc8\x5c\xba\x74\x29\x9d\x8b\xee\xa2\x2a\x06\x9f\x65\x2c\xb9\x14\x42\xde\xbd\x44\x3d\x28\x85\x2e\x5d\x8c\x11\xdf\xff\xc1\x97\x33\x3c\x35\x35\xac\x15\xfa\x10\x93\x87\x78\x3c\xe4\x0c\x17\xb3\xae\x39\x25\x2e\x76\x99\x4b\x5c\x65\x4b\x2c\xc2\x95\x92\x53\xcb\x7c\x4f\x83\x2a\xa1\x92\x3a\xff\xda\xcf\x68\xf4\xad\x58\xe1\x51\x60\x29\xed\x5c\x1a\x2b\x7c\x14\x74\x02\x58\x80\xc9\x20\x4c\xf8\x25\xad\xd8\xf8\x47\xea\x9f\xff\xf2\x6b\x60\x6a\x81\x7d\xe7\xdb\x17\x22\xc0\xaa\xbb\xe8\xaf\x96\xd1\x57\x7f\x02\x4b\xb2\x41\x94\x36\x54\xa3\x91\xe8\x13\xb7\x5e\xef\x51\xc7\xc3\x1e\x73\xbd\xc6\x67\xdc\xe8\x76\x8b\x7e\x80\x10\x58\xde\x64\xda\xa9\xd7\xc9\xa5\xe9\xe9\xee\xc9\xf1\x2b\x00\x00\xff\xff\x7e\x97\x17\x88\x49\x01\x00\x00"

func tmplProto_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileBatTmpl,
		"tmpl/proto_compile.bat.tmpl",
	)
}

func tmplProto_compileBatTmpl() (*asset, error) {
	bytes, err := tmplProto_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.bat.tmpl", size: 329, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x6b\xf3\x30\x10\x86\xf7\x40\xfe\xc3\x7d\x64\xfd\xac\x1b\xba\x25\x64\x2e\x5d\xda\x21\x74\x2e\xb2\x72\x39\x8b\x4a\x3a\x23\x9d\xd2\x96\x90\xff\x5e\x24\x9b\x42\xa1\x8b\x7d\x88\xf7\x9e\xf7\x91\x76\xff\xb0\x96\x8c\xa3\x4f\x48\xe9\x0a\x65\xda\x6e\xb6\x9b\x1d\x3c\xa5\xa2\x36\x04\x98\xb3\xa8\x3c\xc0\x25\x4b\x84\x22\x35\x3b\x82\x68\xdd\xcb\x09\x24\x85\x2f\xd3\x92\x30\x66\xfa\x00\xbf\xe6\x6d\x55\x71\x92\x2e\x7d\x88\xf6\x9d\x20\xf8\x51\x45\x42\x8f\xb2\x57\x70\x41\x12\xc1\xa4\x3a\x97\x3d\x22\x7b\x9d\xea\x68\x9c\x44\x64\x11\x0e\x84\xbd\x71\xac\x97\xbe\x60\xb0\x71\x98\x92\x29\x13\x1c\xc0\x60\x63\x7b\xae\x99\xe0\x00\x1d\xbf\xfe\xd6\xfe\xed\x66\xd7\xf6\x5e\xe7\xb3\x55\x5a\xe4\x1d\x3c\x0a\x8c\x3e\x9d\x7d\xe2\x02\x57\x6f\x17\x13\x01\x26\x85\xa1\xc2\x2f\x83\x60\x13\xff\x18\xe0\xad\x4f\xff\x17\xcc\xc0\x94\x06\x96\xfb\x5a\x71\x22\x02\x1b\x8a\x74\xda\x5f\xb7\xc9\xb3\xeb\x9f\x81\x05\x35\x13\x61\xb4\x45\x29\x23\x7d\xda\x38\x07\x2a\xed\x9d\x57\xc1\xdb\xcd\x3c\xdb\x48\xf7\xbb\xe9\x07\x30\x0c\x2c\x6f\x52\xf5\x38\x87\xca\x3e\x95\x63\xe3\xec\xcd\x77\x00\x00\x00\xff\xff\x44\x50\x25\xa7\xab\x01\x00\x00"

func tmplProto_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileShTmpl,
		"tmpl/proto_compile.sh.tmpl",
	)
}

func tmplProto_compileShTmpl() (*asset, error) {
	bytes, err := tmplProto_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.sh.tmpl", size: 427, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplSvcThriftTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x2d\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x56\x29\xd3\x0b\x4a\x2d\xc8\xa9\xac\xad\xad\xe6\xe5\xaa\xe5\xe5\x42\x95\x28\x2c\x4d\x2d\x2e\x81\x48\x55\x57\xa7\xe6\xa5\xd4\xd6\xf2\x72\xf1\x72\x15\xa7\x16\x95\x65\x26\xa7\x2a\x54\x57\xeb\xf9\x25\xe6\xa6\xd6\xd6\x06\xc3\x04\x78\xb9\xf0\xd8\x89\x62\x1b\x84\x03\xd1\xae\xa0\x61\x68\x85\x66\xa3\x42\x51\x6a\xa1\x26\xc8\x34\xb0\xa5\x60\x5b\x01\x01\x00\x00\xff\xff\xd6\xd0\xa5\x28\xce\x00\x00\x00"

func tmplSvcThriftTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSvcThriftTmpl,
		"tmpl/svc.thrift.tmpl",
	)
}

func tmplSvcThriftTmpl() (*asset, error) {
	bytes, err := tmplSvcThriftTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/svc.thrift.tmpl", size: 206, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\x41\x8a\xc4\x20\x10\x45\xf7\x81\xdc\x41\xb2\x1e\xad\xbd\x90\x03\xcc\x66\x98\x1b\x84\x4a\x62\x4a\x69\x63\x89\xa9\xa6\x1b\xc4\xbb\x37\x8d\xe1\xaf\xfe\xe3\x7f\x9e\xb5\xea\x37\x5d\x82\x31\x2a\xf1\x25\x1c\xa2\xac\xf2\x22\xf9\xb2\x00\x1d\x18\xcc\xb8\x79\x67\xb8\x10\xec\xfc\x4a\x91\x71\x1f\x87\x7b\xac\x8b\xd2\x9a\x5c\x52\x13\xb1\xcd\xb8\x3d\x90\xdc\x92\x8b\x3b\xc2\x7b\xae\xd5\xfc\x77\xd2\x1a\x90\x4b\x9a\x18\x7e\xfa\x6f\x09\x67\xe6\x22\x33\x05\xf1\xcf\xd5\x6c\x7c\x42\xb7\xdc\x4e\x88\x61\x05\xe2\xbb\x4d\xaa\x56\xf3\x87\xa7\x6b\xcd\x74\x32\x0e\xdf\x7c\x02\x00\x00\xff\xff\x1d\x60\x4b\xe4\xbc\x00\x00\x00"

func tmplThrift_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileBatTmpl,
		"tmpl/thrift_compile.bat.tmpl",
	)
}

func tmplThrift_compileBatTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.bat.tmpl", size: 188, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\xc3\x30\x0c\x85\xef\x85\xfe\x07\xd1\x5e\x17\x9b\x6d\xb7\x40\xaf\x83\x5d\xb6\xfd\x83\x62\xa7\xaa\x22\xe6\x58\xc6\x56\xd7\x42\xc8\x7f\x1f\x99\xbd\x4b\xd0\x49\xfa\x9e\xde\x7b\x47\x78\x8f\x45\x5d\x08\xa0\x63\xe6\xab\xc2\xe4\x86\xcf\x62\xf6\xbb\x23\x3c\x1b\xf0\x19\xef\xc0\x4d\xe0\x45\x8a\xae\xe0\x65\x03\x02\x7b\xfc\xc1\xf8\xc7\x5e\x37\xac\xba\xae\xe4\x4d\x32\x04\x8e\xb7\x07\x14\x44\xe8\x61\x54\x4d\xa5\xb7\xb6\x2a\x8c\x4b\x6e\x18\xd1\x48\x26\x7b\x91\x7b\x0c\xe2\x2e\xfb\x5d\xeb\xd4\x65\xe8\x3a\xc2\x08\x07\x92\x3e\xb9\xe1\xdb\x11\x9e\x53\xc6\x2b\x3f\x4e\xf3\x6c\xbe\xea\x65\x59\x2c\x61\xec\x48\xec\x53\xfd\x3b\xf3\x94\x24\xeb\x89\x58\xc7\x9b\x37\x83\x4c\xb6\xa6\xb4\x4c\x1b\xd8\x5b\x92\xb6\x1d\x60\x9e\xcd\x87\x9b\x70\x59\xcc\x7f\xeb\x75\x7e\x03\x00\x00\xff\xff\x44\x38\x4f\x96\x22\x01\x00\x00"

func tmplThrift_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileShTmpl,
		"tmpl/thrift_compile.sh.tmpl",
	)
}

func tmplThrift_compileShTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.sh.tmpl", size: 290, mode: os.FileMode(511), modTime: time.Unix(1502436285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/file.tmpl": tmplFileTmpl,
	"tmpl/gk.json.tmpl": tmplGkJsonTmpl,
	"tmpl/partials/constants.tmpl": tmplPartialsConstantsTmpl,
	"tmpl/partials/endpoint_func.tmpl": tmplPartialsEndpoint_funcTmpl,
	"tmpl/partials/func.tmpl": tmplPartialsFuncTmpl,
	"tmpl/partials/func_parameters.tmpl": tmplPartialsFunc_parametersTmpl,
	"tmpl/partials/func_results.tmpl": tmplPartialsFunc_resultsTmpl,
	"tmpl/partials/func_return.tmpl": tmplPartialsFunc_returnTmpl,
	"tmpl/partials/imports.tmpl": tmplPartialsImportsTmpl,
	"tmpl/partials/interface.tmpl": tmplPartialsInterfaceTmpl,
	"tmpl/partials/interface_func.tmpl": tmplPartialsInterface_funcTmpl,
	"tmpl/partials/interface_stub.tmpl": tmplPartialsInterface_stubTmpl,
	"tmpl/partials/struct.tmpl": tmplPartialsStructTmpl,
	"tmpl/partials/struct_function.tmpl": tmplPartialsStruct_functionTmpl,
	"tmpl/partials/vars.tmpl": tmplPartialsVarsTmpl,
	"tmpl/proto.pb.tmpl": tmplProtoPbTmpl,
	"tmpl/proto_compile.bat.tmpl": tmplProto_compileBatTmpl,
	"tmpl/proto_compile.sh.tmpl": tmplProto_compileShTmpl,
	"tmpl/svc.thrift.tmpl": tmplSvcThriftTmpl,
	"tmpl/thrift_compile.bat.tmpl": tmplThrift_compileBatTmpl,
	"tmpl/thrift_compile.sh.tmpl": tmplThrift_compileShTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"file.tmpl": &bintree{tmplFileTmpl, map[string]*bintree{}},
		"gk.json.tmpl": &bintree{tmplGkJsonTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"constants.tmpl": &bintree{tmplPartialsConstantsTmpl, map[string]*bintree{}},
			"endpoint_func.tmpl": &bintree{tmplPartialsEndpoint_funcTmpl, map[string]*bintree{}},
			"func.tmpl": &bintree{tmplPartialsFuncTmpl, map[string]*bintree{}},
			"func_parameters.tmpl": &bintree{tmplPartialsFunc_parametersTmpl, map[string]*bintree{}},
			"func_results.tmpl": &bintree{tmplPartialsFunc_resultsTmpl, map[string]*bintree{}},
			"func_return.tmpl": &bintree{tmplPartialsFunc_returnTmpl, map[string]*bintree{}},
			"imports.tmpl": &bintree{tmplPartialsImportsTmpl, map[string]*bintree{}},
			"interface.tmpl": &bintree{tmplPartialsInterfaceTmpl, map[string]*bintree{}},
			"interface_func.tmpl": &bintree{tmplPartialsInterface_funcTmpl, map[string]*bintree{}},
			"interface_stub.tmpl": &bintree{tmplPartialsInterface_stubTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{tmplPartialsStructTmpl, map[string]*bintree{}},
			"struct_function.tmpl": &bintree{tmplPartialsStruct_functionTmpl, map[string]*bintree{}},
			"vars.tmpl": &bintree{tmplPartialsVarsTmpl, map[string]*bintree{}},
		}},
		"proto.pb.tmpl": &bintree{tmplProtoPbTmpl, map[string]*bintree{}},
		"proto_compile.bat.tmpl": &bintree{tmplProto_compileBatTmpl, map[string]*bintree{}},
		"proto_compile.sh.tmpl": &bintree{tmplProto_compileShTmpl, map[string]*bintree{}},
		"svc.thrift.tmpl": &bintree{tmplSvcThriftTmpl, map[string]*bintree{}},
		"thrift_compile.bat.tmpl": &bintree{tmplThrift_compileBatTmpl, map[string]*bintree{}},
		"thrift_compile.sh.tmpl": &bintree{tmplThrift_compileShTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

